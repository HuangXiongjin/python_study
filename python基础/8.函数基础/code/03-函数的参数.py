"""---author---hxj"""

# 1.位置参数和关键字参数(针对实参)
"""
根据调用函数的时候传参的方式将参数分别位置参数和关键字参数

1)位置参数: 让实参和形参在位置上一一对应(第一个实参给第一个形参赋值，第二个实参给第二个形参赋值...)
2)关键字参数: 以'形参名=值'的形式传参
注意: 位置参数和关键字参数可以一起使用，但是一起用的时候要求位置参数必须在关键字参数的前面

3)什么时候使用关键字参数：需要跳过前面某个或者某几个参数，直接给后面某个参数赋值的时候必须使用关键字参数
"""


def func1(a, b, c):
    # a=10,b=20,c=30
    print('a:{}, b:{}, c:{}'.format(a, b, c))


# 位置参数传参
func1(10, 20, 30)
# 关键字参数传参
func1(a=100, b=200, c=300)
func1(b=200, c=300, a=100)

# 位置参数和关键字参数同时使用
func1(10, b=20, c=30)
func1(10, c=30, b=20)


# 2.参数默认值（形参）
"""
声明函数时候,形参可以设置默认值， 设置完默认值后调用函数的时候有默认值的参数可以不用传参。
一个函数可以给所有的参数都设置默认值，也可以给部分参数设置默认值；必须保证没有默认值参数必须放在有默认值参数的前面
"""


def func2(x=11, y=22, z=33):
    print('x:{}, y:{}, z:{}'.format(x, y, z))


func2(100, 200, 300)   # x:100, y:200, z:300
func2(100)   # x:100, y:22, z:33
func2(100, 200)    # x:100, y:200, z:33
func2()    # x:11, y:22, z:33

func2(100, z=300)   # x:100, y:22, z:300


# 3.参数类型说明
"""
1)给参数赋默认值, 默认值的类型就是参数的类型
2)以'参数名:类型名'的形式声明函数
"""


def func3(a: int, b: str, c=10):
    print('a:{}, b:{}, c:{}'.format(a, b, c))
    print(a % 10, c % 20)


# func3(90, 'qwe', [12, 45])
def func4(x: list):
    # x.append(100)
    x.append(100)


# 4.不定长参数
"""
1)在形参前加*，那么这个参数就可以同时接受多个实参(位置参数); 带*的参数会作为一个元祖，对应的多个实参是元祖中的元素
2)在形参前加**, 那么这个参数也可以同时接受多个实参(关键字参数,关键字自己随便命名);
  将带**的参数作为一个字典，将关键字参数的关键字作为key实参作为value存储在字典中。
  
def func(*args,**kwargs), 这个函数中 *args 和 **kwargs的作用
"""


# 写一个函数，计算多个数的和
# sum1(1), sum1(2, 45), sum1(2, 4, 5, 6), ....
def func5(*nums):
    # nums = (89, 9, 34.8)
    print(nums)
    print(sum(nums))


func5(89, 9, 34.8)
# func5(a=10, b=20)   # 带*的不定长参数，不能使用关键字参数传参


def func6(x, y, *nums):
    print(x, y, nums)


func6(1, 2, 3, 4, 5, 6, 7, 100)


def func7(**nums):
    print(nums)


func7(a=1, b=2, x=4)
func7(a=1)


# *args 和 **kwargs一起用是为了保证不定长参数传参的时候数既可以使用位置参也可以使用关键字参数
def func8(*args, **kwargs):
    print(args, kwargs)


func8(1, 23)
func8(a=2, c=90, k=34)
func8(2, 4, x=2, y=89)

# (了解)补充: *的用法: *列表/*元祖  -> 直接取出列表/元祖中所有的元素
#               **字典  -> 直接取出字典中的所有元素
list1 = [89, 90, 89]
# *list1  -> 89, 90, 89
print(*list1)   # 89 90 89 ->print(89, 90, 89)


def func9(x, y):
    print(x, y)


func9(1, 2)

list2 = [10, 20]
func9(*list2)

dict1 = {'a': 1, 'b': 2}   # a= 1, b=2


def func10(b, a):
    print(a, b)


func10(**dict1)


# 练习: 声明一个函数，求多个数的差
# differ(1, 2)  -> -1     differ(10, 2, 3) -> 5  differ(10, 20, 30) -> -40
def differ(*nums):
    if not nums:
        print(0)
    else:
        sum1 = nums[0]
        for num in nums[1:]:
            sum1 -= num
        print(sum1)


differ(1, 2)
differ(10, 2, 3)
differ(10, 20, 30)


