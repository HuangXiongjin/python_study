"""---author==hxj---"""
from re import *
# re模块是python提供的，专门针对正则表达式应用的相关函数
# 1.compile(正则表达式) --- 将正则表达式转换成正则对象（基本没用）
re_obj = compile(r'\d{3}')
fullmatch(r'\d{3}', '347')
findall(r'\d{3}', 'asjhf238sdfjk2323')
re_obj.fullmatch('234')
re_obj.findall('asdhf2387sjfhak82334')

# 2.字符串匹配
"""
fullmatch(正则表达式，字符串) -- 让正则表达式和字符串完全匹配
match（正则表达式，字符串） -- 匹配字符串开头

以上两个方法的结果：匹配失败的结果是None，匹配成功回返回匹配对象
"""


# 1）匹配对象
result = fullmatch(r'(\d{3})=([a-z]{2})', '243=am')
print(result)



# a. 获取匹配到的字符
"""
串
匹配对象.group() -- 获取整个正则表达式匹配到的字符串，结果是字符串
匹配对象.group(N) -- 获取整个正则表达式中第N个分组匹配到的字符串
"""
print(result.group())
print(result.group(1))
print(result.group(2))


# b.获取匹配到的字符串在原字符串中的位置信息
"""
匹配对象.span() -- 返回匹配结果在原字符串中的下标范围：[开始下标，结束下标]
匹配对象.span(N) -- 返回第N个分组匹配到的结果在原字符串中的范围
"""


# c.获取原字符串
"""
匹配对象.string
"""
print(result.string)

# 3.查找
"""
1) search(正则表达式，字符串) -- 在字符串中查找到第一个满足正则表达式的子串，找到了返回匹配对象，找不到返回None
2)findall(正则表达式，字符串) -- 获取字符串中所有满足正则表达式的子串；返回时一个列表
注意：如果正则表达式中又分组，列表中的匹配结果只会去分组匹配到的内容
3)finditer(正则表达式，字符串) -- 获取字符串
"""




# 4.切割
"""
split(正则表达式，字符串) -- 将字符串中满足正则表达式的子串作为切割点对字符串进行切割;返回一个字符串列表
"""

# 5.替换
"""
sub(正则表达式，字符串) -- 将字符串2中的所有满足正则表达式的子串都替换成字符串
"""

