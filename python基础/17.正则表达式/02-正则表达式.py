"""---author==hxj---"""
from re import fullmatch
# 控制次数的符号：字符符号
# 1. * --p 匹配0次或者多次



# 2. + --匹配1次或者多次
"""
"""
result = fullmatch(r'123[a-z]+', '123idjf')
print(result)


# 3. ? -- 匹配0次或者1次
result = fullmatch(r'_?123', '_123')
print(result)

# 4. {} -- 匹配N次
"""
1){N} -- 匹配N次
a{3} -- 匹配三个a, aaa
\d{3} -- 匹配三个任意数字， 345， 344， 004

2）{M，N} -- 匹配M到N次（至少M次最多N次）
3）{M，} -- 匹配至少M次， 123a{3, } --> 123aaa; 123aaaaaa...
4) {，N} -- 匹配最多N次，123a{,3} --> 123
"""

# 5.贪婪和非贪婪
"""
在匹配次数不确定的时候，会出现贪婪和非贪婪两种情况；默认情况都是贪婪
贪婪：能够在匹配成功的前提下，匹配次数尽可能多
非贪婪：在能够匹配成功的前提下，匹配次数尽可能少；在匹配次数后面加？
"""
#
"""
正则1 |正则2  -- 先让正则一去匹配，如果匹配成功就成功，失败就再让正则2去匹配（两个正则只要有一个满足就行）
"""
result = fullmatch(r'abc|123', 'abc7834')
print(result)  # None
result = fullmatch(r'abc|123', 'abc')
print(result)  # <re.Match object; span=(0, 3), match='abc'>

"""
# 2）分组
a.分组截取:方便后面分段啊或者分情况取不同匹配结果
b.分组重复:在正则中用\X来重复前面第X个分组匹配到的内容
注意：\X的前面必须有这个分组

"""


print("========================转义符号=====================")
# 1.加\
"""
在正则中有特殊功能和特殊意义的符号前加\,让这个符号的特殊功能和意义消失
"""
re_str = r'\d{3}\.[a-z]{3}'
print(fullmatch(re_str, '234.ajf'))

re_str = r'\^a\+\d{3}\\w'
print(fullmatch(re_str, '^a+897\w'))

# 2.加[]
"""
在[]中有特殊意义的符号：
"""



